import numpy as np
import matplotlib.pyplot as plt
import random
import plotly.graph_objects as go

# Coefficients and peak coordinates
a, b, c, d = [random.uniform(1, 2) for _ in range(4)]
h_x, h_y, h_z = [random.uniform(-5, 5) for _ in range(3)]

# Define the function for z
def f(x, y):
    z = -a * (x - h_x)**2 - b * (y - h_y)**2 + d
    return z

# Generate grid for x and y within constraints
x = np.linspace(-10, 10, 400)
y = np.linspace(-10, 10, 400)
x, y = np.meshgrid(x, y)

# Defining z
z = f(x, y)

population_size = 60
crossover_rate = 0.7
mutation_rate = 0.1
generation_cap = 15
converge_iter = 3  # To track convergence
convergence_threshold = 1e-5

# Calculate fitness based on proximity to the peak
def fitness(individual, h_x, h_y):
    return -np.sqrt((individual[0] - h_x)**2 + (individual[1] - h_y)**2)

# Generate an individual within the planes parameters
def generate_individual_on_plane(f):
    x = random.uniform(-10, 10)
    y = random.uniform(-10, 10)
    z = f(x, y)
    return (x, y, z)

# Initialize the population
def initial_population(population_size, f):
    return [generate_individual_on_plane(f) for _ in range(population_size)]



# Select the fittest individual through tournament selection
def tournament_selection(population, tournament_size):
    selected = random.sample(population, tournament_size)
    selected = sorted(selected, key=lambda x: fitness(x, h_x, h_y), reverse=True)
    return selected[0]

# Perform crossover between two parents
def crossover(parent1, parent2, crossover_rate):
    if random.random() < crossover_rate:
        return (random.choice([parent1[0], parent2[0]]), random.choice([parent1[1], parent2[1]]), f(*parent1[:2]))
    else:
        return parent1

# Mutate an individual by modifying its x and y values
def mutate(individual, mutation_rate):
    if random.random() < mutation_rate:
        x, y, _ = individual
        x += np.random.normal(0, 1)
        y += np.random.normal(0, 1)
        z = f(x, y)
        return (x, y, z)
    return individual

def genetic_algorithm(population_size, crossover_rate, mutation_rate, generation_cap, f, elitism_count=5):
    # Generate the initial population and lists
    population = initial_population(population_size, f)
    best_solutions = []
    best_fitness_values = []
    counter = 0

    # Initialize generation
    generation = 0
    best_fitness = -float('inf')

    while generation < generation_cap:
        # Sort pop by fitness (descending!!)
        population = sorted(population, key=lambda x: fitness(x, h_x, h_y), reverse=True)

        # Create a new population starting with the elites
        new_population = population[:elitism_count]

        while len(new_population) < population_size:
            # Tournament selection
            parent1 = tournament_selection(population, int(population_size * 0.05))
            parent2 = tournament_selection(population, int(population_size * 0.05))

            # Crossover
            child1 = crossover(parent1, parent2, crossover_rate)
            child2 = crossover(parent2, parent1, crossover_rate)

            # Mutation
            child1 = mutate(child1, mutation_rate)
            child2 = mutate(child2, mutation_rate)

            if len(new_population) < population_size:
                new_population.append(child1)
            if len(new_population) < population_size:
                new_population.append(child2)

        # Update the pop
        population = new_population
        best_individual = population[0]
        #Add solutions to list
        best_solutions.append(best_individual)
        best_fitness_value = fitness(best_individual, h_x, h_y)
        best_fitness_values.append(best_fitness_value)

        print(f"Generation {generation + 1}: Best Fitness = {best_fitness_value}")

        # Check for convergence
        if best_fitness_value - best_fitness < convergence_threshold:
            counter += 1
        else:
            counter = 0
        if counter >= converge_iter:
            print(f"Convergence achieved after {generation + 1} generations.")
            break
        best_fitness = best_fitness_value
        generation += 1

    return best_solutions


# Run the genetic algorithm
best_solutions = genetic_algorithm(population_size, crossover_rate, mutation_rate, generation_cap, f, elitism_count=5)

print(f"Best Solution: {best_solutions[-1]}, Fitness: {fitness(best_solutions[-1], h_x, h_y)}")

#Start plot
fig2 = plt.figure(figsize=(12, 8))
ax = fig2.add_subplot(111, projection='3d')
surf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')

# Extract every best solution for each generation
best_x, best_y, best_z = zip(*best_solutions)

#Plot every best solution of each generation as RED circle
fig2 = go.Figure(data=[
    go.Surface(z=z, x=x, y=y, colorscale='Viridis'),
    go.Scatter3d(
        x=list(best_x),
        y=list(best_y),
        z=list(best_z),
        mode='markers+lines',
        marker=dict(
            size=10,
            color='red',
            symbol='circle'
        ),
        line=dict(color='red', width=7),
        name='Solutions'
    )
])

#Plotting the best solution as blue diamond
fig2.add_trace(
    go.Scatter3d(
        x=[best_solutions[-1][0]],
        y=[best_solutions[-1][1]],
        z=[best_solutions[-1][2]],
        mode='markers',
        marker=dict(
            size=10,
            color='blue',
            symbol='diamond'
        ),
        name='Best solution'
    )
)

fig2.update_layout(title='3D Function with Genetic Algorithm Progress', autosize=True,
                  scene=dict(
                      xaxis_title='X Axis',
                      yaxis_title='Y Axis',
                      zaxis_title='Z Axis'))
fig2.show()

# Extract every best fitness for each generationbest_fitness_values = [fitness(solution, h_x, h_y) for solution in best_solutions]
best_fitness_values = [fitness(solution, h_x, h_y) for solution in best_solutions]

# Plotting the progress of the best fitness values over generations
plt.figure(figsize=(8, 6))
plt.plot(range(1, len(best_fitness_values) + 1), best_fitness_values, marker='o', linestyle='-', color='b')
plt.xlabel('Generation')
plt.ylabel('Best Fitness Value')
plt.title('Fitness Progress over Generations')
plt.grid(True)
plt.show()
